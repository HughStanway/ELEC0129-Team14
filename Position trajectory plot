% Define initial and final positions
x0_1 = 0;
xf_1 = -90;
x0_2 = -90;
xf_2 = 0;

% Time array
tf = 5;
t = 0:0.1:30;

% Define the cubic polynomial functions for forward and reverse movements
Xcubic_f = @(t) x0_1 + (xf_1 - x0_1) * (3 * t.^2 / tf^2 - 2 * t.^3 / tf^3);
Xcubic_r = @(t) x0_2 + (xf_2 - x0_2) * (3 * t.^2 / tf^2 - 2 * t.^3 / tf^3);

% Generate position data
position = zeros(size(t));
for i = 1:length(t)
    if t(i) <= 10
        position(i) = x0_1; % Remain at 0 degrees from 0s to 10s
    elseif t(i) > 10 && t(i) <= 15
        position(i) = Xcubic_f(t(i) - 10); % Move from 0 to -90 degrees from 10s to 15s
    elseif t(i) > 15 && t(i) <= 25
        position(i) = -90; % Hold at -90 degrees from 15s to 25s
    elseif t(i) > 25 && t(i) <= 30
        position(i) = Xcubic_r(t(i) - 25); % Move from -90 to 0 degrees from 25s to 30s
    end
end

% Plotting
subplot(1,3,1), plot(t, position), title('Position')
xlabel('Time, seconds')
ylabel('Y-Position')
set(gca,'Fontsize',14);    
grid on
